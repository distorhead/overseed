#!/usr/bin/env python3

import subprocess
import argparse
import hashlib
import daemonize
import os
import sys
import yaml
import shutil


class Application:
  CONFIG = {
    'events': ['modify', 'move', 'create', 'delete'],
    'exclude': ['\.git', '.*\.swp', '.*\.swx', '.*\.swo', '\.overseed/.*'],
    'on_event': [
      "/usr/bin/ctags -R -f .tags"
    ],
    'inotifywait': "/usr/bin/inotifywait"
  }

  ENV_PATH = ".overseed"

  def action_init(self, args):
    env_path = self.env_path(args)
    if os.path.exists(env_path):
      self.terminate_app("overseed environment already exists!")
    else:
      self.mkdir(env_path)
      self.mkdir(os.path.join(env_path, "config"))
      self.mkdir(os.path.join(env_path, "pid"))
      self.replace_config(env_path)

  def action_start(self, args):
    self.get_env(args)
    self.check_not_started(args)

    if args['no_daemonize']:
      self.watcher_loop(args)
    else:
      pid_path = self.overseed_pid_path(self.env_path(args))
      print("Starting overseed: {}".format(pid_path))
      daemon = daemonize.Daemonize(
          app="overseed",
          pid=pid_path,
          action=lambda: self.watcher_loop(args)
      )
      daemon.start()

  def action_stop(self, args):
    self.get_env(args)
    env_path = self.env_path(args)
    pid_path = self.overseed_pid_path(env_path)
    pid = self.get_overseed_pid(env_path)

    if pid:
      self.kill(pid)
      self.rmrf(pid_path)
    else:
      self.terminate_app("overseed not running!")

  def action_destroy(self, args):
    self.get_env(args)
    env_path = self.env_path(args)
    self.rmrf(env_path)


  def check_not_started(self, args):
    env_path = self.env_path(args)
    pid = self.get_overseed_pid(env_path)
    if pid:
      self.terminate_app("overseed already running with pid={}".format(pid))

  def event_handler(self, cfg):
    for cmd in cfg['on_event']:
      self.call_cmd(cmd)

  def watcher_loop(self, args):
    target = args['basedir']
    env_path = self.env_path(args)
    cfg = self.get_config(env_path)

    os.chdir(target)
    self.event_handler(cfg)
    while True:
      res = self.inotify_waiter(cfg)
      if res == 0:
        self.event_handler(cfg)


  def env_path(self, args):
    return os.path.join(args["basedir"], self.ENV_PATH)

  def config_path(self, env_path):
    return os.path.join(env_path, "config", "overseed.yml")

  def overseed_pid_path(self, env_path):
    return os.path.join(env_path, "pid", "overseed.pid")

  def mkdir(self, directory):
    print("Creating '{}'".format(directory))
    return os.makedirs(directory, exist_ok=True)

  def rmrf(self, path):
    print("Removing '{}'".format(path))
    if os.path.isdir(path):
      return shutil.rmtree(path, True)
    else:
      return os.unlink(path)

  def replace_config(self, env_path, config=None):
    if not config:
      config = self.CONFIG

    try:
      configpath = self.config_path(env_path)
      f = open(configpath, 'w')
      configdump = yaml.dump(config)
      print("Writing config '{}'".format(configpath))
      f.write(configdump)
      f.close()
    except IOError as e:
      self.terminate_app(e)

  def get_env(self, args):
    env_path = self.env_path(args)

    if os.path.exists(env_path):
      return env_path
    else:
      self.terminate_app("overseed environment not found!")

  def get_config(self, env_path):
    configpath = self.config_path(env_path)

    if not os.path.exists(configpath):
      self.replace_config(env_path)

    try:
      f = open(configpath, 'r')
      res = yaml.load(f)
      f.close()
      return res
    except (IOError, YAMLError) as e:
      self.terminate_app(e)

  def get_overseed_pid(self, env_path):
    pid_path = self.overseed_pid_path(env_path)
    if os.path.exists(pid_path):
      try:
        f = open(pid_path, 'r')
        res = int(f.read())
        f.close()
        return res
      except IOError as e:
        self.terminate_app(e)
      except ValueError:
        return None
    else:
      return None

  def terminate_app(self, failure_msg, prefix="Failure", exit_code=1):
    print("{}: {}".format(prefix, failure_msg), file=sys.stderr)
    sys.exit(exit_code)

  def call_cmd(self, cmd):
    print("[SHELL] {cmd}".format(cmd=cmd))
    return subprocess.call(cmd, shell=True)

  def inotify_waiter(self, cfg):
    cmd = "{} -r .".format(cfg['inotifywait'])

    events = cfg['events']
    if events:
      cmd += " -e {}".format(",".join(events))

    exclude = cfg['exclude']
    if exclude:
      cmd += " --exclude='({})'".format("|".join(exclude))

    return self.call_cmd(cmd)

  def kill(self, pid):
    self.call_cmd("kill {pid}".format(pid=pid))


def main():
  app = Application()

  parser = argparse.ArgumentParser(description='Super inotify watcher script')
  parser.add_argument('-b', '--basedir', metavar='BASEDIR', default=os.getcwd(),
                      help='Base working directory, current by default')

  subparsers = parser.add_subparsers(title='actions', description='Valid actions:')

  sparser = subparsers.add_parser('init', help='Initialize overseed environment')
  sparser.set_defaults(action_callback=app.action_init)

  sparser = subparsers.add_parser('start', help='Start overseed')
  sparser.add_argument('-r', '--no-daemonize', action='store_true', default=False,
                      help='Do not daeminze overseed')
  sparser.set_defaults(action_callback=app.action_start)

  sparser = subparsers.add_parser('stop', help='Stop overseed')
  sparser.set_defaults(action_callback=app.action_stop)

  sparser = subparsers.add_parser('destroy', help='Destroy overseed environment')
  sparser.set_defaults(action_callback=app.action_destroy)

  args = parser.parse_args()
  args_dict = vars(args)

  if hasattr(args, 'action_callback'):
    args.action_callback(args_dict)
  else:
    parser.print_help()
    sys.exit(1)


if __name__ == '__main__':
  main()
